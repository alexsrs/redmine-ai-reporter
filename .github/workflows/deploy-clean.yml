name: Deploy to Azure (FREE TIER PROTECTED)

on:
  push:
    branches: [master]
  workflow_dispatch:

env:
  AZURE_RESOURCE_GROUP: "rg-redmine-ai-reporter"
  AZURE_LOCATION: "East US 2"

jobs:
  # ========================================
  # TERRAFORM INFRASTRUCTURE (PROTECTED)
  # ========================================
  infrastructure:
    name: "Deploy Infrastructure (FREE Tier)"
    runs-on: ubuntu-latest
    outputs:
      function_app_name: ${{ steps.terraform_output.outputs.function_app_name }}
      static_web_app_name: ${{ steps.terraform_output.outputs.static_web_app_name }}
      project_name: ${{ steps.terraform_output.outputs.project_name }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.0
          terraform_wrapper: false

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Terraform Init
        working-directory: ./infra
        run: terraform init

      - name: Import Existing Resources
        working-directory: ./infra
        run: |
          echo "ÔøΩ Importing existing Azure resources to avoid conflicts..."
          chmod +x import-resources.sh
          ./import-resources.sh

      - name: Terraform Plan (Protected Resources)
        working-directory: ./infra
        run: |
          echo "üîç Planning Terraform with PROTECTED resources..."
          terraform plan -out=tfplan
          echo "üìã Changes preview:"
          terraform show -no-color tfplan | head -50

      - name: Terraform Apply (Safe Mode)
        working-directory: ./infra
        run: |
          echo "üöÄ Applying Terraform (protected mode)..."
          terraform apply -auto-approve tfplan
          echo "‚úÖ Infrastructure deployed successfully!"

      - name: Get Terraform Outputs
        id: terraform_output
        working-directory: ./infra
        run: |
          echo "function_app_name=$(terraform output -raw function_app_name)" >> $GITHUB_OUTPUT
          echo "static_web_app_name=$(terraform output -raw static_web_app_name)" >> $GITHUB_OUTPUT
          echo "project_name=$(terraform output -raw project_name)" >> $GITHUB_OUTPUT
          echo "üè∑Ô∏è Project: $(terraform output -raw project_name)"

  # ========================================
  # FUNCTION APP DEPLOYMENT
  # ========================================
  deploy-api:
    name: "Deploy Function App (API)"
    runs-on: ubuntu-latest
    needs: infrastructure
    defaults:
      run:
        working-directory: ./src/api

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: src/api/package-lock.json

      - name: Install Dependencies
        run: |
          echo "üì¶ Installing API dependencies..."
          npm ci --production

      - name: Build API
        run: |
          echo "üî® Building API..."
          npm run build 2>/dev/null || echo "No build script found"

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Function App
        run: |
          echo "üöÄ Deploying to Function App: ${{ needs.infrastructure.outputs.function_app_name }}"
          zip -r ../api-deploy.zip . -x "node_modules/@types/*" "*.md" "*.txt"

          az functionapp deployment source config-zip \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name ${{ needs.infrastructure.outputs.function_app_name }} \
            --src ../api-deploy.zip \
            --timeout 300

      - name: Test API Health
        run: |
          echo "üîç Testing API health..."
          sleep 60  # Wait for deployment
          FUNCTION_URL="https://${{ needs.infrastructure.outputs.function_app_name }}.azurewebsites.net"

          for i in {1..5}; do
            echo "Attempt $i: Testing $FUNCTION_URL/api/health"
            if curl -f "$FUNCTION_URL/api/health" -m 30; then
              echo "‚úÖ API Health Check: OK"
              break
            else
              echo "‚ö†Ô∏è API not ready yet, waiting..."
              sleep 30
            fi
          done

  # ========================================
  # STATIC WEB APP DEPLOYMENT
  # ========================================
  deploy-frontend:
    name: "Deploy Static Web App (Frontend)"
    runs-on: ubuntu-latest
    needs: [infrastructure, deploy-api]
    defaults:
      run:
        working-directory: ./src/frontend

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: src/frontend/package-lock.json

      - name: Configure API URL
        run: |
          echo "üîß Configuring API URL..."
          API_URL="https://${{ needs.infrastructure.outputs.function_app_name }}.azurewebsites.net"
          echo "VITE_API_URL=$API_URL" > .env.production
          echo "API configured: $API_URL"

      - name: Install and Build Frontend
        run: |
          echo "üì¶ Installing frontend dependencies..."
          npm ci
          echo "üî® Building frontend..."
          npm run build

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get SWA Deployment Token
        id: get_swa_token
        run: |
          echo "üîë Obtendo deployment token do Static Web App..."
          echo "token=$(az staticwebapp secrets list \
            --name ${{ needs.infrastructure.outputs.static_web_app_name }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --query properties.apiKey -o tsv)" >> $GITHUB_OUTPUT

      - name: Deploy to Azure Static Web App
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ steps.get_swa_token.outputs.token }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: upload
          app_location: "src/frontend"
          api_location: "src/api"
          output_location: "src/frontend/dist"

  # ========================================
  # VALIDATION AND TESTING
  # ========================================
  validate-deployment:
    name: "Validate Full Deployment"
    runs-on: ubuntu-latest
    needs: [infrastructure, deploy-api, deploy-frontend]

    steps:
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Test Complete Application
        run: |
          echo "üß™ Testing complete application..."

          # Test API
          API_URL="https://${{ needs.infrastructure.outputs.function_app_name }}.azurewebsites.net"
          echo "Testing API: $API_URL/api/health"

          if curl -f "$API_URL/api/health" -m 30; then
            echo "‚úÖ API: Working"
          else
            echo "‚ùå API: Failed"
            exit 1
          fi

          # Test Frontend  
          SWA_URL=$(az staticwebapp show \
            --name ${{ needs.infrastructure.outputs.static_web_app_name }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --query "defaultHostname" -o tsv)

          echo "Testing Frontend: https://$SWA_URL"

          if curl -f "https://$SWA_URL" -m 30; then
            echo "‚úÖ Frontend: Working"
          else
            echo "‚ùå Frontend: Failed"
            exit 1
          fi

      - name: Resource Summary
        run: |
          echo "üìä DEPLOYMENT SUMMARY (FREE TIER)"
          echo "=================================="
          echo "Resource Group: ${{ env.AZURE_RESOURCE_GROUP }}"
          echo "Function App: ${{ needs.infrastructure.outputs.function_app_name }}"
          echo "Static Web App: ${{ needs.infrastructure.outputs.static_web_app_name }}"
          echo "Project: ${{ needs.infrastructure.outputs.project_name }}"
          echo "API URL: https://${{ needs.infrastructure.outputs.function_app_name }}.azurewebsites.net"
          echo ""
          echo "üí∞ All resources using FREE tier"
          echo "üîí Critical resources PROTECTED against recreation"
          echo "üîë API Keys preserved in Key Vault"
          echo "‚úÖ Zero-cost deployment achieved"
