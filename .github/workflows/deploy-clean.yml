name: Deploy to Azure (Smart CI/CD)

on:
  push:
    branches: [master]
  workflow_dispatch:
    inputs:
      force_infrastructure:
        description: "Force infrastructure deployment"
        required: false
        default: false
        type: boolean
      force_api:
        description: "Force API deployment"
        required: false
        default: false
        type: boolean
      force_frontend:
        description: "Force frontend deployment"
        required: false
        default: false
        type: boolean

env:
  AZURE_RESOURCE_GROUP: "rg-redmine-ai-reporter"
  AZURE_LOCATION: "East US 2"

jobs:
  # ========================================
  # DETECT CHANGES
  # ========================================
  detect-changes:
    name: "Detect What Changed"
    runs-on: ubuntu-latest
    outputs:
      infrastructure_changed: ${{ steps.changes.outputs.infrastructure }}
      api_changed: ${{ steps.changes.outputs.api }}
      frontend_changed: ${{ steps.changes.outputs.frontend }}
      force_infra: ${{ github.event.inputs.force_infrastructure == 'true' }}
      force_api: ${{ github.event.inputs.force_api == 'true' }}
      force_frontend: ${{ github.event.inputs.force_frontend == 'true' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect Changes
        id: changes
        run: |
          echo "üîç Detectando mudan√ßas desde o √∫ltimo commit..."

          # Se for workflow_dispatch ou primeiro commit, deploy tudo
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] || [ "$(git rev-list --count HEAD)" = "1" ]; then
            echo "infrastructure=true" >> $GITHUB_OUTPUT
            echo "api=true" >> $GITHUB_OUTPUT
            echo "frontend=true" >> $GITHUB_OUTPUT
            echo "üìã Manual dispatch ou primeiro commit - Deploy completo"
            exit 0
          fi

          # Verificar mudan√ßas nos arquivos
          CHANGED_FILES=$(git diff --name-only HEAD HEAD~1)
          echo "üìÅ Arquivos alterados:"
          echo "$CHANGED_FILES"

          # Infraestrutura mudou?
          if echo "$CHANGED_FILES" | grep -E "^infra/|^\.github/workflows/" > /dev/null; then
            echo "infrastructure=true" >> $GITHUB_OUTPUT
            echo "üèóÔ∏è Infraestrutura alterada"
          else
            echo "infrastructure=false" >> $GITHUB_OUTPUT
            echo "‚úÖ Infraestrutura inalterada"
          fi

          # API mudou?
          if echo "$CHANGED_FILES" | grep -E "^src/api/" > /dev/null; then
            echo "api=true" >> $GITHUB_OUTPUT
            echo "‚ö° API alterada"
          else
            echo "api=false" >> $GITHUB_OUTPUT
            echo "‚úÖ API inalterada"
          fi

          # Frontend mudou?
          if echo "$CHANGED_FILES" | grep -E "^src/frontend/" > /dev/null; then
            echo "frontend=true" >> $GITHUB_OUTPUT
            echo "üåê Frontend alterado"
          else
            echo "frontend=false" >> $GITHUB_OUTPUT
            echo "‚úÖ Frontend inalterado"
          fi

  # ========================================
  # GET INFRASTRUCTURE INFO (ALWAYS)
  # ========================================
  get-infra-info:
    name: "Get Infrastructure Names"
    runs-on: ubuntu-latest
    outputs:
      function_app_name: ${{ steps.get_names.outputs.function_app_name }}
      static_web_app_name: ${{ steps.get_names.outputs.static_web_app_name }}
      project_name: ${{ steps.get_names.outputs.project_name }}

    steps:
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get Resource Names
        id: get_names
        run: |
          echo "üìã Obtendo nomes dos recursos..."
          
          # Nomes fixos definidos no Terraform
          echo "function_app_name=redmine-ai-reporter-func" >> $GITHUB_OUTPUT
          echo "static_web_app_name=redmine-ai-reporter-swa" >> $GITHUB_OUTPUT
          echo "project_name=redmine-ai-reporter" >> $GITHUB_OUTPUT
          
          echo "‚úÖ Function App: redmine-ai-reporter-func"
          echo "‚úÖ Static Web App: redmine-ai-reporter-swa"

  # ========================================
  # TERRAFORM INFRASTRUCTURE (CONDITIONAL)
  # ========================================
  infrastructure:
    name: "Deploy Infrastructure (FREE Tier)"
    runs-on: ubuntu-latest
    needs: [detect-changes, get-infra-info]
    if: needs.detect-changes.outputs.infrastructure_changed == 'true' || needs.detect-changes.outputs.force_infra == 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.0
          terraform_wrapper: false

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Check if Infrastructure Exists
        id: check_infra
        run: |
          echo "üîç Verificando se infraestrutura j√° existe..."

          # Verificar se o Resource Group existe
          if az group show --name ${{ env.AZURE_RESOURCE_GROUP }} &> /dev/null; then
            echo "infra_exists=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Infraestrutura j√° existe - Import ser√° feito"
          else
            echo "infra_exists=false" >> $GITHUB_OUTPUT
            echo "üèóÔ∏è Infraestrutura n√£o existe - Ser√° criada"
          fi

      - name: Terraform Init
        working-directory: ./infra
        run: terraform init

      - name: Import Existing Resources
        working-directory: ./infra
        run: |
          echo "ÔøΩ Importing existing Azure resources to avoid conflicts..."
          chmod +x import-resources.sh
          ./import-resources.sh

      - name: Terraform Plan (Protected Resources)
        working-directory: ./infra
        run: |
          echo "üîç Planning Terraform with PROTECTED resources..."
          terraform plan -out=tfplan
          echo "üìã Changes preview:"
          terraform show -no-color tfplan | head -50

      - name: Terraform Apply (Safe Mode)
        working-directory: ./infra
        run: |
          echo "üöÄ Applying Terraform (protected mode)..."
          terraform apply -auto-approve tfplan
          echo "‚úÖ Infrastructure deployed successfully!"

      - name: Get Terraform Outputs
        id: terraform_output
        working-directory: ./infra
        run: |
          echo "function_app_name=$(terraform output -raw function_app_name)" >> $GITHUB_OUTPUT
          echo "static_web_app_name=$(terraform output -raw static_web_app_name)" >> $GITHUB_OUTPUT
          echo "project_name=$(terraform output -raw project_name)" >> $GITHUB_OUTPUT
          echo "üè∑Ô∏è Project: $(terraform output -raw project_name)"

  # ========================================
  # FUNCTION APP DEPLOYMENT
  # ========================================
  deploy-api:
    name: "Deploy Function App (API)"
    runs-on: ubuntu-latest
    needs: [detect-changes, get-infra-info, infrastructure]
    if: |
      always() && 
      (needs.detect-changes.outputs.api_changed == 'true' || 
       needs.detect-changes.outputs.force_api == 'true' ||
       needs.infrastructure.result == 'success')
    defaults:
      run:
        working-directory: ./src/api

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: src/api/package-lock.json

      - name: Install Dependencies
        run: |
          echo "üì¶ Installing API dependencies..."
          npm ci --production

      - name: Build API
        run: |
          echo "üî® Building API..."
          npm run build 2>/dev/null || echo "No build script found"

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Function App
        run: |
          echo "üöÄ Deploying to Function App: ${{ needs.get-infra-info.outputs.function_app_name }}"
          zip -r ../api-deploy.zip . -x "node_modules/@types/*" "*.md" "*.txt"

          az functionapp deployment source config-zip \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name ${{ needs.get-infra-info.outputs.function_app_name }} \
            --src ../api-deploy.zip \
            --timeout 300

      - name: Test API Health
        run: |
          echo "üîç Testing API health..."
          sleep 60  # Wait for deployment
          FUNCTION_URL="https://${{ needs.get-infra-info.outputs.function_app_name }}.azurewebsites.net"

          for i in {1..5}; do
            echo "Attempt $i: Testing $FUNCTION_URL/api/health"
            if curl -f "$FUNCTION_URL/api/health" -m 30; then
              echo "‚úÖ API Health Check: OK"
              break
            else
              echo "‚ö†Ô∏è API not ready yet, waiting..."
              sleep 30
            fi
          done

  # ========================================
  # STATIC WEB APP DEPLOYMENT
  # ========================================
  deploy-frontend:
    name: "Deploy Static Web App (Frontend)"
    runs-on: ubuntu-latest
    needs: [detect-changes, get-infra-info, infrastructure, deploy-api]
    if: |
      always() && 
      (needs.detect-changes.outputs.frontend_changed == 'true' || 
       needs.detect-changes.outputs.force_frontend == 'true' ||
       needs.infrastructure.result == 'success')
    defaults:
      run:
        working-directory: ./src/frontend

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: src/frontend/package-lock.json

      - name: Configure API URL
        run: |
          echo "üîß Configuring API URL..."
          API_URL="https://${{ needs.get-infra-info.outputs.function_app_name }}.azurewebsites.net"
          echo "VITE_API_URL=$API_URL" > .env.production
          echo "API configured: $API_URL"

      - name: Install and Build Frontend
        run: |
          echo "üì¶ Installing frontend dependencies..."
          npm ci
          echo "üî® Building frontend..."
          npm run build

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get SWA Deployment Token
        id: get_swa_token
        run: |
          echo "üîë Obtendo deployment token do Static Web App..."
          echo "token=$(az staticwebapp secrets list \
            --name ${{ needs.get-infra-info.outputs.static_web_app_name }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --query properties.apiKey -o tsv)" >> $GITHUB_OUTPUT

      - name: Deploy to Azure Static Web App
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ steps.get_swa_token.outputs.token }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: upload
          app_location: "src/frontend/dist"
          output_location: "."
          skip_app_build: true
          skip_api_build: true

  # ========================================
  # VALIDATION AND TESTING
  # ========================================
  validate-deployment:
    name: "Validate Full Deployment"
    runs-on: ubuntu-latest
    needs: [get-infra-info, infrastructure, deploy-api, deploy-frontend]

    steps:
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Test Complete Application
        run: |
          echo "üß™ Testing complete application..."

          # Test API
          API_URL="https://${{ needs.get-infra-info.outputs.function_app_name }}.azurewebsites.net"
          echo "Testing API: $API_URL/api/health"

          if curl -f "$API_URL/api/health" -m 30; then
            echo "‚úÖ API: Working"
          else
            echo "‚ùå API: Failed"
            exit 1
          fi

          # Test Frontend  
          SWA_URL=$(az staticwebapp show \
            --name ${{ needs.get-infra-info.outputs.static_web_app_name }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --query "defaultHostname" -o tsv)

          echo "Testing Frontend: https://$SWA_URL"

          if curl -f "https://$SWA_URL" -m 30; then
            echo "‚úÖ Frontend: Working"
          else
            echo "‚ùå Frontend: Failed"
            exit 1
          fi

      - name: Resource Summary
        run: |
          echo "üìä DEPLOYMENT SUMMARY (FREE TIER)"
          echo "=================================="
          echo "Resource Group: ${{ env.AZURE_RESOURCE_GROUP }}"
          echo "Function App: ${{ needs.get-infra-info.outputs.function_app_name }}"
          echo "Static Web App: ${{ needs.get-infra-info.outputs.static_web_app_name }}"
          echo "Project: ${{ needs.get-infra-info.outputs.project_name }}"
          echo "API URL: https://${{ needs.get-infra-info.outputs.function_app_name }}.azurewebsites.net"
          echo ""
          echo "üí∞ All resources using FREE tier"
          echo "üîí Critical resources PROTECTED against recreation"
          echo "üîë API Keys preserved in Key Vault"
          echo "‚úÖ Zero-cost deployment achieved"
