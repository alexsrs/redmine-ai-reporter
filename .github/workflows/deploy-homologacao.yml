name: Deploy to Homologação

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

permissions:
  id-token: write
  contents: read

env:
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: homologacao

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: |
            src/api/package-lock.json
            src/frontend/package-lock.json

      - name: Azure Login with OIDC
        uses: azure/login@v1
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ~1.12.0

      - name: Terraform Init
        working-directory: ./infra
        run: terraform init

      - name: Import existing resources if needed
        working-directory: ./infra
        run: |
          terraform import azurerm_resource_group.main "/subscriptions/${{ env.AZURE_SUBSCRIPTION_ID }}/resourceGroups/rg-redmine-ai-reporter-dev" || true
        continue-on-error: true

      - name: Terraform Plan
        working-directory: ./infra
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        working-directory: ./infra
        run: terraform apply -auto-approve tfplan

      - name: Get Infrastructure Outputs
        id: terraform-outputs
        working-directory: ./infra
        run: |
          echo "function_app_name=$(terraform output -raw AZURE_FUNCTION_APP_NAME)" >> $GITHUB_OUTPUT
          echo "static_web_app_name=$(terraform output -raw AZURE_STATIC_WEB_APP_NAME)" >> $GITHUB_OUTPUT
          echo "resource_group_name=$(terraform output -raw resource_group_name)" >> $GITHUB_OUTPUT

      - name: Build API
        working-directory: ./src/api
        run: |
          npm ci
          npm run build

      - name: Deploy Function App
        working-directory: ./src/api
        run: |
          npx func azure functionapp publish ${{ steps.terraform-outputs.outputs.function_app_name }} --javascript

      - name: Build Frontend
        working-directory: ./src/frontend
        run: |
          # Update production environment with correct Function App URL
          echo "VITE_API_BASE_URL=https://${{ steps.terraform-outputs.outputs.function_app_name }}.azurewebsites.net/api" > .env.production
          npm ci
          npm run build

      - name: Deploy Static Web App
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "/src/frontend"
          api_location: "/src/api"
          output_location: "dist"

      - name: Test Health Endpoints
        run: |
          echo "Aguardando deploy..."
          sleep 30

          # Test Function App health directly
          echo "Testing Function App health..."
          curl -f "https://${{ steps.terraform-outputs.outputs.function_app_name }}.azurewebsites.net/api/health" || exit 1

          # Test Function App generate-suggestion
          echo "Testing Function App generate-suggestion..."
          curl -X POST -H "Content-Type: application/json" -d '{"texto":"teste"}' "https://${{ steps.terraform-outputs.outputs.function_app_name }}.azurewebsites.net/api/generate-suggestion" || exit 1

          echo "Deploy concluído com sucesso!"
